var $=selector=>document.querySelector(selector);var $$=selector=>document.querySelectorAll(selector);var on=(element,event,callback)=>{if(typeof element==="string"){const queryElement=document.querySelector(element);if(queryElement){queryElement.addEventListener(event,callback)}else{console.error(`Element not found for selector: "${element}"`)}}else if(element instanceof Element){element.addEventListener(event,callback)}else{console.error('Invalid element provided to "on" function')}};function Bold(){const boldButton=$("#bold");boldButton&&on(boldButton,"click",()=>{document.execCommand("bold",false,void 0)})}var modal=$(".modal");var modalClose=$(".modal__close");var modalOpen=$(".modal__open");function modalOpenFunction(){if(!modal){return}modal.classList.add("modal--active")}function modalCloseFunction(){if(!modal){return}modal.classList.remove("modal--active")}function modalOpenEvent(){if(!modalOpen){return}on(modalOpen,"click",modalOpenFunction)}function modalCloseEvent(){if(!modalClose){return}on(modalClose,"click",modalCloseFunction)}var a=class{constructor(t){this.lastAccessedState=null;this.listeners=new Set;this.getState=()=>t2=>t2==="back"?this.lastAccessedState:(this.lastAccessedState=this.currentState,this.currentState);this.setState=t2=>{this.currentState=this.isFunction(t2)?t2(this.currentState):t2,this.listeners.forEach(i=>i())};this.subscribe=t2=>(this.listeners.add(t2),()=>this.listeners.delete(t2));this.currentState=t}isFunction(t){return typeof t=="function"}};var r=class e{constructor(t){this.listeners=new Set;this.getState=()=>this.currentState;this.setState=t2=>{this.currentState=this.isFunction(t2)?t2(this.currentState):t2,this.listeners.forEach(i=>i(this.currentState))};this.subscribe=t2=>(this.listeners.add(t2),()=>this.listeners.delete(t2));this.currentState=t}isFunction(t){return typeof t=="function"}static getInstance(t){return e.instance||(e.instance=new e(t||{})),e.instance}static resetInstance(t){e.instance=new e(t||{})}};var n=class{constructor(t){if(t.length===0)throw new Error("StateMachine must be initialized with at least one machine state.");this.states=t,this.currentState=t[0],this.currentState.onEnter?.()}transitionTo(t){if(this.states.includes(t))this.currentState.onExit?.(),this.currentState=t,this.currentState.onEnter?.();else throw new Error(`Invalid state: ${t.name}`)}getCurrentState(){return this.currentState}};var s=class{constructor(t){this.listeners=new Set;this.isBatchingUpdates=false;this.pendingNotifications=new Set;this.hasStateChanged=false;if(typeof t!="object"||t===null)throw new Error("ProxyStateManager can only manage state of type 'object'.");this.state=this.createProxy(t)}createProxy(t){let i={set:(o,h,l)=>{let p=o[h];return o[h]=l,JSON.stringify(p)!==JSON.stringify(l)&&(this.hasStateChanged=true,this.isBatchingUpdates?this.listeners.forEach(S=>this.pendingNotifications.add(S)):this.notifyListeners()),true}};return new Proxy(t,i)}isFunction(t){return typeof t=="function"}getState(){return this.state}setState(t){let i=this.isFunction(t)?t(this.state):t;JSON.stringify(this.state)!==JSON.stringify(i)&&(this.state=this.createProxy(i),this.isBatchingUpdates?this.listeners.forEach(o=>this.pendingNotifications.add(o)):this.notifyListeners())}subscribe(t){return this.listeners.add(t),()=>this.unsubscribe(t)}unsubscribe(t){this.listeners.delete(t)}notifyListeners(){this.listeners.forEach(t=>t(this.state))}beginBatchUpdates(){this.isBatchingUpdates=true}endBatchUpdates(){this.pendingNotifications.size>0&&(this.pendingNotifications.forEach(t=>t(this.state)),this.pendingNotifications.clear()),this.isBatchingUpdates=false}};var c=class{constructor(){this.stateManagers=new Map}initializeStateMachine(t){if(this.stateManagers.has("stateMachine"))throw new Error("StateMachine has already been initialized.");if(!t||t.length===0)throw new Error("StateMachine must be initialized with at least one state.");this.stateManagers.set("stateMachine",new n(t))}initializeProxyState(t){if(this.stateManagers.has("proxy"))throw new Error("ProxyStateManager has already been initialized.");if(typeof t!="object"||t===null)throw new Error("ProxyStateManager can only manage state of type 'object'.");this.stateManagers.set("proxy",new s(t))}initializeGlobalState(t){if(this.stateManagers.has("global"))throw new Error("GlobalStateManager has already been initialized.");this.stateManagers.set("global",r.getInstance(t))}initializeComponentState(t){if(this.stateManagers.has("component"))throw new Error("ComponentStateManager has already been initialized.");this.stateManagers.set("component",new a(t))}addStateMachine(t){return this.initializeStateMachine(t),this}addProxyState(t){return this.initializeProxyState(t),this}addGlobalState(t){return this.initializeGlobalState(t),this}addComponentState(t){return this.initializeComponentState(t),this}getStateManager(t){if(!this.stateManagers.has(t))throw new Error(`State manager of type '${t}' does not exist.`);return this.stateManagers.get(t)}};function SingleTypeField(){const manager=new c;manager.addComponentState([]);const state=manager.getStateManager("component");const subscribe=state.subscribe;const sfields=state.getState();const button=$("#single_type_save_button");const closeButton=$(".modal__close");function Fields(){return`<p>Selected Fields</p>
        ${sfields()?.map(field=>{return`<div>${field.name}</div>`})}`}function updateFields(){const singleTypeFields=$("#single_type_fields");if(!singleTypeFields){return}singleTypeFields.innerHTML=Fields()}subscribe(updateFields);$$(".single_type_field").forEach(field=>{on(field,"click",e2=>{const target=e2.target;console.log(sfields("back"));if(target.checked){state.setState([...sfields()||[],{name:target.value}])}else{state.setState((sfields()||[]).filter(field2=>field2.name!==target.value))}})});on(closeButton,"click",()=>{$$(".single_type_field").forEach(field=>{field.checked=false});state.setState([])});on(button,"click",()=>{$$(".single_type_field").forEach(field=>{field.checked=false});const data={fields:sfields()?.map(field=>field.name)||[]};modalCloseFunction()})}document.addEventListener("DOMContentLoaded",()=>{Bold();modalOpenEvent();modalCloseEvent();SingleTypeField()});
